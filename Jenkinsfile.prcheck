void setBuildStatus(String message, String state) {
    def repoUrl = scm.getUserRemoteConfigs()[0].getUrl()
    
    echo "DEBUG: Repository URL detected: ${repoUrl}"
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/helm-validation"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent any
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    stages {
        stage('Initialize Build') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-pat', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                    setBuildStatus("Build is starting...", "PENDING");
                }
            }
        }
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        
        stage('PR Validation') {
            steps {
                script {
                    echo "This is a PR validation for PR#${env.CHANGE_ID}"

                    sh "helm lint ./api-server"
                    sh "helm template ./api-server"
                    sh "helm lint ./trace-processor"
                    sh "helm template ./trace-processor"
                    sh "helm lint ./trace-consumer"
                    sh "helm template ./trace-consumer"
                    sh "helm lint ./db-backup-operator"
                    sh "helm template ./db-backup-operator"
                    sh "helm lint ./postgresql"
                    sh "helm template ./postgresql"
                }
            }
        }
    }    
    
    post {
        success {
                withCredentials([usernamePassword(credentialsId: 'github-pat', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                    setBuildStatus("Build succeeded", "SUCCESS");
                }
        }
        failure {
            withCredentials([usernamePassword(credentialsId: 'github-pat', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                setBuildStatus("Build failed", "FAILURE");
            }
        }
        always {
            cleanWs()
        }
    }
}